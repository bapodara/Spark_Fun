{"metadata":{"name":"SF_Restaurants_Food_Safety","user_save_timestamp":"1969-12-31T16:00:00.000Z","auto_save_timestamp":"1969-12-31T16:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val inspections_raw = sc.textFile(\"/SFResturantdata/inspections_plus.txt\")","outputs":[{"name":"stdout","output_type":"stream","text":"inspections_raw: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1] at textFile at <console>:45\n"},{"metadata":{},"data":{"text/html":"MapPartitionsRDD[1] at textFile at &lt;console&gt;:45"},"output_type":"execute_result","execution_count":1}]},{"metadata":{},"cell_type":"markdown","source":"## Inspection scores Distribution"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val Inspection_scores = inspections_raw.map(line => line.split(\"\\t\").map(_.trim)).filter(_(1)!=\"\").map{s => (s(1), 1)}.reduceByKey(_ + _)\nInspection_scores.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(69,44)\n(88,640)\n(60,12)\n(57,8)\n(82,250)\n(80,266)\n(49,1)\n(96,2365)\n(47,1)\n(42,1)\n(53,2)\n(67,34)\n(62,16)\n(98,1534)\n(75,112)\n(90,1241)\n(46,1)\n(100,3705)\n(55,8)\n(56,7)\n(71,80)\n(85,415)\n(79,202)\n(54,6)\n(93,374)\n(51,2)\n(72,113)\n(86,483)\n(92,1482)\n(59,6)\n(68,43)\n(52,1)\n(73,89)\n(58,12)\n(83,328)\n(66,35)\n(77,155)\n(50,1)\n(84,319)\n(87,440)\n(91,411)\n(61,12)\n(64,30)\n(89,480)\n(81,289)\n(78,167)\n(76,143)\n(94,1751)\n(70,71)\n(63,16)\n(74,109)\n(65,31)\nInspection_scores: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[5] at reduceByKey at <console>:46\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":2}]},{"metadata":{},"cell_type":"markdown","source":"##Risk category Distribution"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val risks_raw = sc.textFile(\"/SFResturantdata/violations_plus.txt\")\nval risk_category = risks_raw.map(line => line.split(\"\\t\").map(_.trim)).map(_(3)).filter(_ != \"\"\"\"N/A\"\"\"\").map{s => (s, 1)}.reduceByKey(_ + _)\n\n//risk_category.take(10).foreach(println)\nrisk_category.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(Low Risk,24717)\n(N/A,31)\n(High Risk,6446)\n(Moderate Risk,15713)\nrisks_raw: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[7] at textFile at <console>:45\nrisk_category: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[12] at reduceByKey at <console>:46\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":3}]},{"metadata":{},"cell_type":"markdown","source":"## 20 businesses which got lowest scores\n####\"business_id\",\"name\",\"address\",\"city\",\"postal_code\",\"latitude\",”longitude”, score"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val lowest_score_business = inspections_raw.map(line => line.split(\"\\t\").map(_.trim)).filter(_(1)!=\"\").map(s => (s(0), s(1))).sortBy( _._2.toInt)\nval bus20rdd = sc.parallelize(lowest_score_business.take(20))\n//bus20rdd.foreach(println)\n\n//val bussiness = sc.textFile(\"/Users/sbapodara/Trainings/UCSC/Apache_Spark/Assignment_2/businesses_plus.csv\").map(line=>line.split(\",\")).map(s => (s(0), (s(0), s(1),s(2),s(3),s(4),s(5),s(6))))\nval bussiness = sc.textFile(\"/SFResturantdata/businesses_plus.txt\").map(line=>line.split(\"\\t\")).map(s => (s(0), (s(0), s(1),s(2),s(3),s(4),s(5),s(6))))\n\nval bdetail = bus20rdd.join(bussiness)\nval bdetail_clean = bdetail.map(r =>  ( r._2._2._1,r._2._2._2,r._2._2._3,r._2._2._4,r._2._2._5,r._2._2._6,r._2._2._7 ,r._2._1 )).sortBy( _._8.toInt)\n\nval bdetail_clean2 =  sc.parallelize(bdetail_clean.take(20), 1)\nbdetail_clean2.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(74522,Dick Lee Pastry,716 Jackson St ,,94133,,,42)\n(68633,ABC Bakery Cafe,650 Jackson St ,San Francisco,94133,37.796133,-122.406237,46)\n(18480,Imperial Palace,818 Washington St ,San Francisco,94108,37.795138,-122.406863,47)\n(286,PUNJAB KABAB HOUSE,101 EDDY St ,SF,94102,37.784303,-122.409647,49)\n(64154,\"Yummy Dim Sum & Fast Food, LLC\",930 Stockton St ,San Francisco,94108,37.794457,-122.407896,50)\n(3151,New Asia Restaurant,772 Pacific Ave ,San Francisco,94133,37.796808,-122.407964,51)\n(69962,Hong Kee & Kim,91 Drumm St ,San Francisco,94111,,,51)\n(18480,Imperial Palace,818 Washington St ,San Francisco,94108,37.795138,-122.406863,52)\n(3115,Yee's Restaurant,1131 Grant Ave ,San Francisco,94133,37.797292,-122.406914,53)\n(3123,Les Joulins,44 Ellis St ,San Francisco,94102,,,53)\n(69618,Fancy Wheatfield Bakery,1362 Stockton St ,San Francisco,94133,,,54)\n(3459,BASIL THAI RESTAURANT & BAR,1175 FOLSOM St ,S.F.,94103,37.775508,-122.409361,54)\n(18480,Imperial Palace,818 Washington St ,San Francisco,94108,37.795138,-122.406863,54)\n(25572,Bristol Farms #2317,845 Market St 010,SF,94103,37.784848,-122.406892,54)\n(74084,Miss Saigon,100 06th St ,,94103,,,54)\n(67154,RIVERSIDE SEAFOOD RESTAURANT,1201 VICENTE St ,SF,94116,37.739065,-122.479769,54)\n(2233,The AA Bakery & Cafe,1068 Stockton St ,San Francisco,94108,37.795564,-122.40809,55)\n(2697,HOWARD'S CAFE,1309 09th Ave ,SAN FRANCISCO,94122,37.758941,-122.48591,55)\n(3115,Yee's Restaurant,1131 Grant Ave ,San Francisco,94133,37.797292,-122.406914,55)\n(2302,MANOR COFFEE SHOP,321A WEST PORTAL Ave ,SAN FRANCISCO,94127,37.73762,-122.469396,55)\nlowest_score_business: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[20] at sortBy at <console>:46\nbus20rdd: org.apache.spark.rdd.RDD[(String, String)] = ParallelCollectionRDD[21] at parallelize at <console>:47\nbussiness: org.apache.spark.rdd.RDD[(String, (String, String, String, String, String, String, String))] = MapPartitionsRDD[25] at map at <console>:51\nbdetail: org.apache.spark.rdd.RDD[(String, (String, (String, String, String, String, String, String, String)))] = MapPartitionsRDD[28] at join at <console>:53\nbdetail_clean: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String)] = MapPartitionsRDD[34] at sortBy at <console>:54\nbdetail_clean2: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String)]..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":4}]},{"metadata":{},"cell_type":"markdown","source":"## 20 Highest scoring Business"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val highest_score_business = inspections_raw.map(line => line.split(\"\\t\").map(_.trim)).filter(_(1)!=\"\").map(s => (s(0), s(1)))\nval highbusdistinct = highest_score_business.distinct().sortBy( _._2.toInt, false)\nval highbus20rdd = sc.parallelize(highbusdistinct.take(20))\n\nval bdetail = highbus20rdd.join(bussiness)\n//bdetail.take(20).foreach(println)\n\nval bdetail_clean = bdetail.map(r =>  ( r._2._2._1,r._2._2._2,r._2._2._3,r._2._2._4,r._2._2._5,r._2._2._6,r._2._2._7 ,r._2._1 )).sortBy( _._8.toInt)\n\nval bdetail_clean2 =  sc.parallelize(bdetail_clean.take(20), 1)\nbdetail_clean2.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(69388,Dragoneats,520 Gough St ,San Francisco,94102,37.778357,-122.423237,100)\n(67911,Prather Ranch Meat Co.,1 Ferry Building  #33,,94111,37.795225,-122.39377,100)\n(4873,MEREB MARKET,698 Guerrero St ,SF,94110,37.760097,-122.423674,100)\n(1614,STARBUCKS COFFEE #5646,455 MARKET St ,S.F.,94105,37.791227,-122.398872,100)\n(57630,The Dry Dock,2118 Greenwich St ,San Francisco,94123,37.799048,-122.435353,100)\n(9714,Rose Resnick Lighthouse For The Blind,214 Van Ness Ave,San Francisco,94102,37.777647,-122.419636,100)\n(61915,La Loma Produce Nos. 3 & 9 Inc,5652 MISSION St ,SF,94112,37.710685,-122.447907,100)\n(1520,STARBUCKS #5852,199 FREMONT St ,S.F.,94103,37.789314,-122.395192,100)\n(60400,STARBELLY,3583 16th St ,SF,94114,37.764233,-122.43254,100)\n(79543,Red Sauce Meatballs, Off The Grid  ,,,,,100)\n(13041,Coi,373 broadway St ,San Francisco,94133,37.798229,-122.40349,100)\n(1381,PEBBLE'S CAFE,2852 Diamond St ,SF,94131,37.73382,-122.434093,100)\n(66411,Del Popolo LLC,269 Chattanooga St ,SF,94114,37.752274,-122.426336,100)\n(65072,Baladie Cafe,0337 Kearny St,San Francisco,94108,37.791096,-122.404161,100)\n(1742,McAllister Grocery & Deli,136 McAllister St,San Francisco,94102,37.780916,-122.414312,100)\n(79905,AT&T PARK - Gotham Bar,24 Willie Mays Plaza  ,,94107,,,100)\n(4057,SF MARRIOTT BIN (formerlyATRIUM LOUNGE),55 04th St ,S.F.,94103,37.784964,-122.404752,100)\n(37170,InterContinental San Francisco 5th Fl. Kitchen,888 Howard St 5th Floor,SF,94103,37.781664,-122.404778,100)\n(5630,AT&T - VENDING COMMISSARY Rm5326 [145160],24 WILLIE MAYS PLAZA 5.21.01,S.F.,94107,37.778382,-122.391151,100)\n(60551,Annie's Hot Dogs & Pretzels,\" Golden Gate Park, Carousel Snack Bar  \",SF,,37.777122,-122.419639,100)\nhighest_score_business: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[38] at map at <console>:52\nhighbusdistinct: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[46] at sortBy at <console>:53\nhighbus20rdd: org.apache.spark.rdd.RDD[(String, String)] = ParallelCollectionRDD[47] at parallelize at <console>:54\nbdetail: org.apache.spark.rdd.RDD[(String, (String, (String, String, String, String, String, String, String)))] = MapPartitionsRDD[50] at join at <console>:56\nbdetail_clean: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String)] = MapPartitionsRDD[56] at sortBy at <console>:59\nbdetail_clean2: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String)] = ParallelCollectionRDD[57] at paralle..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":5}]},{"metadata":{},"cell_type":"markdown","source":"### violations of Business with 100 score "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val Inspection_scores_100 = inspections_raw.map(line => line.split(\"\\t\").map(_.trim)).filter(_(1)!=\"\").map(s => (s(0), s(1))).distinct().filter{case (key, value) => value.toInt ==100}\nval a = risks_raw.map(line => line.split(\"\\t\").map(_.trim)).map(s=> (s(0), s(3)))\nval b = Inspection_scores_100.join(a).distinct().map(r => (r._1, r._2._2)).reduceByKey(_ +\",\"+ _)\n\nb.take(20).foreach(println)\n","outputs":[{"name":"stdout","output_type":"stream","text":"(74294,Low Risk)\n(76546,Low Risk)\n(61285,High Risk,Moderate Risk)\n(27964,Low Risk,Moderate Risk)\n(3665,High Risk)\n(5872,Moderate Risk,Low Risk)\n(68813,Low Risk,High Risk)\n(6019,Low Risk)\n(3283,Moderate Risk)\n(65463,Low Risk)\n(279,Low Risk,Moderate Risk)\n(34179,Moderate Risk,High Risk,Low Risk)\n(61058,Low Risk,Moderate Risk)\n(65283,Low Risk,High Risk,Moderate Risk)\n(76698,High Risk,Low Risk,Moderate Risk)\n(4538,Moderate Risk,Low Risk)\n(774,Low Risk,Moderate Risk)\n(39875,Low Risk,Moderate Risk)\n(60208,Moderate Risk,High Risk,Low Risk)\n(61001,Moderate Risk)\nInspection_scores_100: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[64] at filter at <console>:47\na: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[66] at map at <console>:48\nb: org.apache.spark.rdd.RDD[(String, String)] = ShuffledRDD[74] at reduceByKey at <console>:49\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":6}]},{"metadata":{},"cell_type":"markdown","source":"### average inspection scores by zipcode"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val distinct_Inspection_scores = inspections_raw.map(line => line.split(\"\\t\").map(_.trim)).filter(_(1)!=\"\").map(s => (s(0), s(1))).distinct()\nval zip_score = distinct_Inspection_scores.join(bussiness).map(r => ( r._2._2._5, r._2._1)).filter{case (key, value) => key != \"\"}\nval zip_score_values = zip_score.mapValues(x => (x.toInt, 1)).reduceByKey((x, y) => (x._1 + y._1, x._2 + y._2))\nval average_score = zip_score_values.map(r => (r._1, (r._2._1/r._2._2)))\naverage_score.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(94114,90)\n(94133,86)\n(94127,87)\n(94513,92)\n(94066,100)\n(94102,90)\n(94545,100)\n(94014,90)\n(CA,88)\n(0,84)\n(94111,92)\n(94120,90)\n(94104,92)\n(94140,97)\n(92672,91)\n(94115,90)\n(94117,90)\n(94609,87)\n(94101,87)\n(94112,92)\n(94110,90)\n(94118,91)\n(94109,88)\n(94132,94)\n(CA  94523,93)\n(94013,98)\n(94130,97)\n(941033148,98)\n(94116,89)\n(94134,90)\n(94103,89)\n(94158,95)\n(94129,83)\n(94131,92)\n(94108,88)\n(94124,92)\n(95105,100)\n(94122,86)\n(94123,90)\n(94121,90)\n(94105,92)\n(94107,93)\n(94143,88)\ndistinct_Inspection_scores: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[80] at distinct at <console>:47\nzip_score: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[85] at filter at <console>:48\nzip_score_values: org.apache.spark.rdd.RDD[(String, (Int, Int))] = ShuffledRDD[87] at reduceByKey at <console>:49\naverage_score: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[88] at map at <console>:50\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":7}]},{"metadata":{},"cell_type":"markdown","source":"### proportion of all businesses in each neighborhood (zip code) that have incurred at least one of the following violations\n\"Moderate risk vermin infestation\"\n\"Sewage or wastewater contamination”\n\"Improper food labeling or menu misrepresentation\"\n\"Contaminated or adulterated food”\n\"Reservice of previously served foods\"\n"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val business = sc.textFile(\"/SFResturantdata/businesses_plus.txt\").map(line => line.split(\"\\t\")).filter{_(4) != \"\" }.map(s => ( s(0), s(4).trim)).distinct()\nval business_zipcount = business.map(s => ( s._2.trim, 1)).reduceByKey(_ + _)\nval violations = sc.textFile(\"/SFResturantdata/violations_plus.txt\").filter(line=> (line.contains(\"Contaminated or adulterated food\") || line.contains(\"Reservice of previously served foods\") || line.contains(\"Sewage or wastewater contamination\") || line.contains(\"Improper food labeling or menu misrepresentation\") || line.contains(\"High risk vermin infestation\") || line.contains(\"Moderate risk vermin infestation\"))).map(line => line.split(\"\\t\")).filter{x => x.length==5}.map(s => (s(0), s(4).trim)).distinct()\nval zip_violation = violations.join(business).map(x => (x._2._2, 1)).reduceByKey(_ + _)\nval business_violations = business_zipcount.leftOuterJoin(zip_violation)\nval v = business_violations.map(x => (x._1,(( x._2._2.getOrElse(0).toFloat)/x._2._1)*100)).sortBy(_._2)\nv.foreach(println)","outputs":[{"name":"stdout","output_type":"stream","text":"(941,0.0)\n(94132,11.111112)\n(94513,0.0)\n(94107,14.408602)\n(94188,0.0)\n(94124,18.38565)\n(94014,0.0)\n(94111,18.430035)\n(94030,0.0)\n(94104,19.745224)\n(94118,22.1843)\n(CA,0.0)\n(0,0.0)\n(94120,0.0)\n(94140,0.0)\n(92672,0.0)\n(94609,0.0)\n(95105,0.0)\n(94066,0.0)\n(941102019,0.0)\n(94131,22.807016)\n(94103,25.499231)\n(94121,27.13568)\n(94112,28.195488)\n(94127,29.411766)\n(94117,29.92126)\n(94102,30.990992)\n(94110,36.719883)\n(94123,36.764706)\n(94114,36.88213)\n(94108,36.963696)\n(94134,38.14433)\n(94143,40.0)\n(94116,40.869564)\n(94115,45.0)\n(94109,47.580643)\n(94133,54.264977)\n(94122,55.700325)\n(CA  94523,100.0)\n(94129,100.0)\n(94545,0.0)\n(94101,0.0)\n(94501,0.0)\n(94015,0.0)\n(941033148,0.0)\n(94130,0.0)\n(94013,0.0)\n(94536,0.0)\n(94945,0.0)\n(94080,0.0)\n(94105,6.967213)\n(94158,9.090909)\nbusiness: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[96] at distinct at <console>:45\nbusiness_zipcount: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[98] at reduceByKey at <console>:46\nviolations: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[107] at distinct at <console>:47\nzip_violation: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[112] at reduceByKey at <console>:48\nbusiness_violations: org.apache.spark.rdd.RDD[(String, (Int, Option[Int]))] = MapPartitionsRDD[115] at leftOuterJoin at <console>:49\nv: org.apache.spark.rdd.RDD[(String, Float)] = MapPartitionsRDD[121] at sortBy at <console>:50\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":8}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"markdown","source":"###Are SF restaurants clean? Justify...\nSF resturants are not clean.\nAs it can be seen from above result that more than half of the zipcodes in san francisco includes resturants which have high risk violations, The resturant are not clean and this not safe."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"markdown","source":"### Mapping 100 businesses with serious violations"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.SparkContext._\nval Sviolations = sc.textFile(\"/SFResturantdata/violations_plus.txt\").filter(line=> (line.contains(\"Contaminated or adulterated food\") || line.contains(\"Reservice of previously served foods\") || line.contains(\"Sewage or wastewater contamination\") || line.contains(\"Improper food labeling or menu misrepresentation\") || line.contains(\"High risk vermin infestation\") || line.contains(\"Moderate risk vermin infestation\"))).map(line => line.split(\"\\t\")).filter{x => x.length==5}.map(s => (s(0), s(4).trim)).distinct()\nval vbusiness = sc.textFile(\"/SFResturantdata/businesses_plus.txt\").map(line => line.split(\"\\t\")).map(s => (s(0), (s(5),s(6)))).distinct()   //.filter{_(4) != \"\" }.map(s => ( s(0), s(4).trim)).distinct()\nval bizviolations = Sviolations.join(vbusiness).map(x => (x._2._2._1, x._2._2._2)).filter{case(x, y)=> (x != \"\")}.map{case(x,y) => (x.toDouble,y.toDouble)}\nval a = bizviolations.collect() \nval points = Seq((37.795991,-122.421817), (37.784884,-122.409425), (37.789404,-122.433954), (37.764408,-122.461978))\nval w = widgets.GeoPointsChart(a, maxPoints=100)","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.SparkContext._\nSviolations: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[130] at distinct at <console>:48\nvbusiness: org.apache.spark.rdd.RDD[(String, (String, String))] = MapPartitionsRDD[137] at distinct at <console>:49\nbizviolations: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[143] at map at <console>:50\na: Array[(Double, Double)] = Array((37.794723,-122.406944), (37.795991,-122.421817), (37.784884,-122.409425), (37.789404,-122.433954), (37.789404,-122.433954), (37.789404,-122.433954), (37.764408,-122.461978), (37.791924,-122.398588), (37.763274,-122.482557), (37.763274,-122.482557), (37.779847,-122.418985), (37.797114,-122.422034), (37.751403,-122.436286), (37.751403,-122.436286), (37.758941,-122.48591), (37.758941,-122.4859..."},{"metadata":{},"data":{"text/html":"<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonfcbacec2a6567bfd9d057d693b44ed19&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:37.794723,&quot;_2&quot;:-122.406944},{&quot;_1&quot;:37.795991,&quot;_2&quot;:-122.421817},{&quot;_1&quot;:37.784884,&quot;_2&quot;:-122.409425},{&quot;_1&quot;:37.789404,&quot;_2&quot;:-122.433954},{&quot;_1&quot;:37.789404,&quot;_2&quot;:-122.433954},{&quot;_1&quot;:37.789404,&quot;_2&quot;:-122.433954},{&quot;_1&quot;:37.764408,&quot;_2&quot;:-122.461978},{&quot;_1&quot;:37.791924,&quot;_2&quot;:-122.398588},{&quot;_1&quot;:37.763274,&quot;_2&quot;:-122.482557},{&quot;_1&quot;:37.763274,&quot;_2&quot;:-122.482557},{&quot;_1&quot;:37.779847,&quot;_2&quot;:-122.418985},{&quot;_1&quot;:37.797114,&quot;_2&quot;:-122.422034},{&quot;_1&quot;:37.751403,&quot;_2&quot;:-122.436286},{&quot;_1&quot;:37.751403,&quot;_2&quot;:-122.436286},{&quot;_1&quot;:37.758941,&quot;_2&quot;:-122.48591},{&quot;_1&quot;:37.758941,&quot;_2&quot;:-122.48591},{&quot;_1&quot;:37.786568,&quot;_2&quot;:-122.429754},{&quot;_1&quot;:37.799513,&quot;_2&quot;:-122.410704},{&quot;_1&quot;:37.786059,&quot;_2&quot;:-122.418952},{&quot;_1&quot;:37.784288,&quot;_2&quot;:-122.410224},{&quot;_1&quot;:37.792593,&quot;_2&quot;:-122.421019},{&quot;_1&quot;:37.793295,&quot;_2&quot;:-122.407788},{&quot;_1&quot;:37.757923,&quot;_2&quot;:-122.393914},{&quot;_1&quot;:37.790067,&quot;_2&quot;:-122.434027},{&quot;_1&quot;:37.777122,&quot;_2&quot;:-122.419639},{&quot;_1&quot;:37.775379,&quot;_2&quot;:-122.420136},{&quot;_1&quot;:37.715126,&quot;_2&quot;:-122.398901},{&quot;_1&quot;:37.783984,&quot;_2&quot;:-122.481969},{&quot;_1&quot;:37.749851,&quot;_2&quot;:-122.415121},{&quot;_1&quot;:37.749851,&quot;_2&quot;:-122.415121},{&quot;_1&quot;:37.780298,&quot;_2&quot;:-122.482022},{&quot;_1&quot;:37.720894,&quot;_2&quot;:-122.478029},{&quot;_1&quot;:37.772097,&quot;_2&quot;:-122.430814},{&quot;_1&quot;:37.794543,&quot;_2&quot;:-122.397037},{&quot;_1&quot;:37.780515,&quot;_2&quot;:-122.477846},{&quot;_1&quot;:37.798557,&quot;_2&quot;:-122.435767},{&quot;_1&quot;:37.798557,&quot;_2&quot;:-122.435767},{&quot;_1&quot;:37.785138,&quot;_2&quot;:-122.440904},{&quot;_1&quot;:37.78332,&quot;_2&quot;:-122.432647},{&quot;_1&quot;:37.776524,&quot;_2&quot;:-122.425607},{&quot;_1&quot;:37.742743,&quot;_2&quot;:-122.481749},{&quot;_1&quot;:37.742743,&quot;_2&quot;:-122.481749},{&quot;_1&quot;:37.728515,&quot;_2&quot;:-122.398743},{&quot;_1&quot;:37.765049,&quot;_2&quot;:-122.420122},{&quot;_1&quot;:37.765049,&quot;_2&quot;:-122.420122},{&quot;_1&quot;:37.797954,&quot;_2&quot;:-122.428477},{&quot;_1&quot;:37.779984,&quot;_2&quot;:-122.485229},{&quot;_1&quot;:37.779153,&quot;_2&quot;:-122.395569},{&quot;_1&quot;:37.798634,&quot;_2&quot;:-122.435854},{&quot;_1&quot;:37.787863,&quot;_2&quot;:-122.411407},{&quot;_1&quot;:37.760575,&quot;_2&quot;:-122.388398},{&quot;_1&quot;:37.767194,&quot;_2&quot;:-122.435576},{&quot;_1&quot;:37.797596,&quot;_2&quot;:-122.410207},{&quot;_1&quot;:37.744449,&quot;_2&quot;:-122.439384},{&quot;_1&quot;:37.788928,&quot;_2&quot;:-122.406584},{&quot;_1&quot;:37.80824,&quot;_2&quot;:-122.410189},{&quot;_1&quot;:37.80824,&quot;_2&quot;:-122.410189},{&quot;_1&quot;:37.789278,&quot;_2&quot;:-122.420387},{&quot;_1&quot;:37.758941,&quot;_2&quot;:-122.48591},{&quot;_1&quot;:37.801407,&quot;_2&quot;:-122.409296},{&quot;_1&quot;:37.764414,&quot;_2&quot;:-122.421806},{&quot;_1&quot;:37.764414,&quot;_2&quot;:-122.421806},{&quot;_1&quot;:37.789914,&quot;_2&quot;:-122.417214},{&quot;_1&quot;:37.763983,&quot;_2&quot;:-122.46709},{&quot;_1&quot;:37.763983,&quot;_2&quot;:-122.46709},{&quot;_1&quot;:37.716105,&quot;_2&quot;:-122.440422},{&quot;_1&quot;:37.782718,&quot;_2&quot;:-122.469492},{&quot;_1&quot;:37.782718,&quot;_2&quot;:-122.469492},{&quot;_1&quot;:37.787973,&quot;_2&quot;:-122.418197},{&quot;_1&quot;:37.787973,&quot;_2&quot;:-122.418197},{&quot;_1&quot;:37.766293,&quot;_2&quot;:-122.407671},{&quot;_1&quot;:37.793598,&quot;_2&quot;:-122.406097},{&quot;_1&quot;:37.800096,&quot;_2&quot;:-122.409907},{&quot;_1&quot;:37.767554,&quot;_2&quot;:-122.403756},{&quot;_1&quot;:37.746759,&quot;_2&quot;:-122.426995},{&quot;_1&quot;:37.762568,&quot;_2&quot;:-122.397192},{&quot;_1&quot;:37.787288,&quot;_2&quot;:-122.418389},{&quot;_1&quot;:37.771682,&quot;_2&quot;:-122.430427},{&quot;_1&quot;:37.799718,&quot;_2&quot;:-122.410677},{&quot;_1&quot;:37.788603,&quot;_2&quot;:-122.420737},{&quot;_1&quot;:37.791714,&quot;_2&quot;:-122.400835},{&quot;_1&quot;:37.766394,&quot;_2&quot;:-122.421986},{&quot;_1&quot;:37.752756,&quot;_2&quot;:-122.411086},{&quot;_1&quot;:37.752756,&quot;_2&quot;:-122.411086},{&quot;_1&quot;:37.714458,&quot;_2&quot;:-122.44277},{&quot;_1&quot;:37.796308,&quot;_2&quot;:-122.421907},{&quot;_1&quot;:37.796308,&quot;_2&quot;:-122.421907},{&quot;_1&quot;:37.784961,&quot;_2&quot;:-122.412761},{&quot;_1&quot;:37.765384,&quot;_2&quot;:-122.478129},{&quot;_1&quot;:37.744726,&quot;_2&quot;:-122.420395},{&quot;_1&quot;:37.744726,&quot;_2&quot;:-122.420395},{&quot;_1&quot;:37.744726,&quot;_2&quot;:-122.420395},{&quot;_1&quot;:37.730164,&quot;_2&quot;:-122.399114},{&quot;_1&quot;:37.785227,&quot;_2&quot;:-122.431472},{&quot;_1&quot;:37.785227,&quot;_2&quot;:-122.431472},{&quot;_1&quot;:37.765028,&quot;_2&quot;:-122.420402},{&quot;_1&quot;:37.775813,&quot;_2&quot;:-122.494499},{&quot;_1&quot;:37.797848,&quot;_2&quot;:-122.435607},{&quot;_1&quot;:37.785227,&quot;_2&quot;:-122.431472},{&quot;_1&quot;:37.785227,&quot;_2&quot;:-122.431472}],&quot;genId&quot;:&quot;1687654863&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/geoPointsChart'], \n      function(playground, _magicgeoPointsChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicgeoPointsChart,\n    \"o\": {\"lat\":\"_1\",\"lon\":\"_2\",\"width\":600,\"height\":400,\"rField\":null,\"colorField\":null}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon0598f36dea3453f4cf9ecb1ec465c68f\">\n      Max Points\n    </label><input id=\"input-anon0598f36dea3453f4cf9ecb1ec465c68f\" type=\"number\" name=\"input-anon0598f36dea3453f4cf9ecb1ec465c68f\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon0598f36dea3453f4cf9ecb1ec465c68f\" data-this=\"{&quot;valueId&quot;:&quot;anon0598f36dea3453f4cf9ecb1ec465c68f&quot;,&quot;valueInit&quot;:100}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n        <p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon8085ca5cea55dcbe3992e5d43c6bee3f&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> <span style=\"color:red\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1d9d4ae55312e128e57a3522d8dfcaf9&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n        <div>\n        </div>\n      </div></div>"},"output_type":"execute_result","execution_count":9}]}],"nbformat":4}